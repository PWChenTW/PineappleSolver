# API Deployment Configuration

# Docker Compose Configuration
version: '3.8'

services:
  # API Service
  ofc-solver-api:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.api
    image: ofc-solver-api:latest
    container_name: ofc-solver-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CORS_ORIGINS=https://app.ofcsolver.com,http://localhost:3000
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
    depends_on:
      - redis
    networks:
      - ofc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ofc-solver-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - ofc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Background Worker
  ofc-solver-worker:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.worker
    image: ofc-solver-worker:latest
    container_name: ofc-solver-worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - LOG_LEVEL=INFO
      - WORKER_CONCURRENCY=4
    depends_on:
      - redis
    networks:
      - ofc-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ofc-solver-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ofc-solver-api
    networks:
      - ofc-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ofc-solver-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ofc-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ofc-solver-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ofc-network
    restart: unless-stopped

networks:
  ofc-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

---
# Kubernetes Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ofc-solver-api
  labels:
    app: ofc-solver
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ofc-solver
      component: api
  template:
    metadata:
      labels:
        app: ofc-solver
        component: api
    spec:
      containers:
      - name: api
        image: ofc-solver-api:latest
        ports:
        - containerPort: 8000
        env:
        - name: REDIS_HOST
          value: "ofc-solver-redis"
        - name: REDIS_PORT
          value: "6379"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: ofc-solver-api
spec:
  selector:
    app: ofc-solver
    component: api
  ports:
  - port: 80
    targetPort: 8000
  type: LoadBalancer

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ofc-solver-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ofc-solver-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Rate Limiting Configuration (Redis)
apiVersion: v1
kind: ConfigMap
metadata:
  name: rate-limit-config
data:
  rate_limits.lua: |
    -- Sliding window rate limiter
    local key = KEYS[1]
    local now = tonumber(ARGV[1])
    local window = tonumber(ARGV[2])
    local limit = tonumber(ARGV[3])
    
    local clearBefore = now - window
    
    redis.call('zremrangebyscore', key, 0, clearBefore)
    
    local current = redis.call('zcard', key)
    if current < limit then
        redis.call('zadd', key, now, now)
        redis.call('expire', key, window)
        return limit - current - 1
    else
        return -1
    end

---
# Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream api_backend {
            least_conn;
            server ofc-solver-api-0:8000 max_fails=3 fail_timeout=30s;
            server ofc-solver-api-1:8000 max_fails=3 fail_timeout=30s;
            server ofc-solver-api-2:8000 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name api.ofcsolver.com;
            
            # Rate limiting zones
            limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
            limit_req_zone $http_x_api_key zone=key_limit:10m rate=100r/s;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            
            location /api/v1/ {
                # Rate limiting
                limit_req zone=api_limit burst=20 nodelay;
                limit_req zone=key_limit burst=100 nodelay;
                
                # Proxy settings
                proxy_pass http://api_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                
                # Timeouts
                proxy_connect_timeout 30s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;
                
                # Buffer settings
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
                
                # CORS headers (if not handled by API)
                if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'X-API-Key,X-Request-ID,Content-Type';
                    add_header 'Access-Control-Max-Age' 86400;
                    return 204;
                }
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
            }
        }
    }