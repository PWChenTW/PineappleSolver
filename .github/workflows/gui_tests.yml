name: GUI Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # ÊØèÂ§©ÂáåÊô®ÈÅãË°å‰∏ÄÊ¨°
    - cron: '0 0 * * *'

jobs:
  gui-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
        browser: [chrome, firefox]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest pytest-xdist
    
    # Chrome Ë®≠ÁΩÆ
    - name: Setup Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
    
    - name: Setup ChromeDriver
      if: matrix.browser == 'chrome'
      uses: nanasess/setup-chromedriver@v2
    
    # Firefox Ë®≠ÁΩÆ
    - name: Setup Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest
    
    - name: Setup GeckoDriver
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-geckodriver@latest
    
    - name: Run GUI Tests
      run: |
        python run_gui_tests.py \
          --browser ${{ matrix.browser }} \
          --headless \
          --ci \
          --report-dir test_reports
      env:
        TEST_HEADLESS: true
        CI: true
    
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: gui-test-reports-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        path: test_reports/
    
    - name: Upload Screenshots
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-screenshots-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.browser }}
        path: test_screenshots/
    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test_reports/junit_report_*.xml
        check_name: GUI Test Results (${{ matrix.os }} - Python ${{ matrix.python-version }} - ${{ matrix.browser }})

  performance-tests:
    runs-on: ubuntu-latest
    needs: gui-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium locust
    
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Setup ChromeDriver
      uses: nanasess/setup-chromedriver@v2
    
    - name: Run Performance Tests
      run: |
        python run_gui_tests.py \
          --browser chrome \
          --headless \
          --suite performance \
          --ci \
          --report-dir performance_reports
    
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: performance_reports/
    
    - name: Comment PR with Performance Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance_reports/latest_report.json', 'utf8');
          const data = JSON.parse(report);
          
          const comment = `## üöÄ Performance Test Results
          
          | Metric | Value |
          |--------|-------|
          | Page Load Time | ${data.page_load_time}ms |
          | AI Response Time | ${data.ai_response_time}ms |
          | Memory Usage | ${data.memory_usage}MB |
          | Success Rate | ${data.success_rate}% |
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });